-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
create table movies (id integer, name text, score integer);
create table movie_cast (movie_id integer, cast_id integer, cast_name text);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies (score);
CREATE INDEX cast_index ON movie_cast (cast_id);
CREATE INDEX movie_index ON movies (id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion


-- [insert your SQL statement(s) BELOW this line]

select
round(sum(case when score > 50 then 1 else 0 end)*100/count(*), 1) as prop
from movies;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT * FROM movies ORDER BY score DESC, name
LIMIT 7;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT
    cast_id, cast_name, count(movie_id) as movie_count
FROM
    movie_cast
GROUP BY
    cast_id    
ORDER BY
    movie_count desc, cast_name
limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]
 

SELECT
    cast_id, cast_name, 
    AVG(CASE WHEN movies.score>50 THEN movies.score END)as avgerage_score


FROM movie_cast
left JOIN movies ON movie_cast.movie_id = movies.id

GROUP BY
cast_id
HAVING count(movie_id)>2

ORDER BY avgerage_score DESC, cast_name

limit 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

create view good_collaboration as

select cast_member_id1, cast_member_id2, movie_count, average_movie_score
from (SELECT A.cast_id as cast_member_id1, B.cast_id as cast_member_id2, count(A.movie_id) as movie_count, round(avg(movies.score), 1) as average_movie_score

FROM movie_cast A, movie_cast B, movies

WHERE A.movie_id = B.movie_id
AND A.movie_id = movies.id
group by cast_member_id1,cast_member_id2)

WHERE cast_member_id1<cast_member_id2 
AND movie_count>=3
And average_movie_score>=40

order by movie_count
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

select cast_member_id1 as cast_id, movie_cast.cast_name, avg(average_movie_score)as collaboration_score 
from movie_cast,
(select cast_member_id1, cast_member_id2,average_movie_score
from good_collaboration
union all
select cast_member_id2, cast_member_id1, average_movie_score
from good_collaboration)
where cast_member_id1 = movie_cast.cast_id

group by cast_id
order by collaboration_score DESC, movie_cast.cast_name
limit 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE virtual TABLE movie_overview using fts3 (id integer, name text, year integer, overview text, popularity decimal);

.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT count(*) as count_overview FROM movie_overview WHERE overview MATCH 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]


select id from movie_overview 
where overview match "love NEAR/5 story";


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --